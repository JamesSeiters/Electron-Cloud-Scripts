#!/bin/bash -e

# Author: James Seiters
# Created: 2018/11/30
# Updated: 2018/12/3
# Copyright: GPLv3
# Description: A shell script to automate the creation of ZFS backed VM disk.
#              Created from instructions on https://ramsdenj.com/2016/07/21/
#              making-a-zvol-backed-virtualbox-vm-on-linux.html
#######
# TODO:
# DONE Need to make the function that finds all of the disk on the system and
#	stores them in an array.
# Need to create function that parses the redundancy option.
# Need to hard code the pool vdev count and hot spares.
# Run tests to make sure the argument passing is working in the chroot script.
#######
find_disks () {
    pushd /dev/disk/by-id >& /dev/null
    shopt -s nullglob
    for f in ./*; do
     [[ ! $f =~ wwn* && ! $f =~ usb* && ! $f =~ .*-part*. ]] && printf $PWD${f#.*}
    done
    shopt -u nullglob
    popd >& /dev/null
}

check_redundancy () {
for value in $redundancy_levels; do
    if [[ $1 = $value ]]; then
        if [[ $(printf ${#drives[@]}) -eq $minimum_drives[$1] ]]; then
            printf 0
        else
            printf 1
        fi
    fi
done
}

err_report() {
    printf "Error on line $1"
}
trap 'err_report $LINENO' ERR

usage() {
printf "%s\n" ""\
    "Usage: $0 -p [poolname] -n [NEWHOSTNAME] -u [USERNAME] -w [PASSWORD]"
printf "%s\t%s\n" "" "-s [SAFETYOFF] -- [LISTOFINSTALLDISKS]"\
    "-h" "Displays this help text."\
    "-p" "Name of the pool to create."\
    "-n" "Host name for the new installation."\
    "-u" "User name of the first user."\
    "-w" "Password for the first user."\
    "-s" "Turn safety off by entering the proper code."\
    "--" "List of disk(s) to use for installation."
printf "%s\n" "" "For more information see:"\
   "https://github.com/JamesSeiters/Scripts/tree/master/ZFS%20Install/README.md"
}

exit_abnormal() {
    usage
    exit $1
}

############################
# Define script variables. #
############################
RED='\033[0;31m'
NC='\033[0m'
printf -v linespacer '*%.0s' {1..20}
safety_off=false
readonly redundancy_levels=(single stripe mirror raidz raidz2 raidz3)
declare -Ar minimum_drives=([single]=1 [stripe]=2 [mirror]=2 [raidz]=3\
        [raidz2]=4 [raidz3]=5)
redundancy=raidz
vdevs=2
hot_spares=0
verbose=0

###################
# Handle options. #
###################
saved_args=$@
while getopts "p:n:u:w:s:dqvh" options; do
        case "$options" in
        h)
                usage
                exit 0
        ;;
        p)
                poolname=$OPTARG
        ;;
        n)
                newhostname=$OPTARG
        ;;
        u)
                username=$OPTARG
        ;;
        w)
                password=$OPTARG
        ;;
        s)
                if [[ $OPTARG = "U78T56" ]] ; then safety_off=true
                fi
        ;;
        d)
                set -x
        ;;
        q)
                set +x
                exec 6>&1
                exec > /dev/null
        ;;
        v)
                if [[ verbose -lt 2 ]]; then
                        verbose=$((verbose+1))
                fi
        ;;
        :)
                printf "Error: -$OPTARG requires an argument.\n"
                exit_abnormal 1
        ;;
        *)
                exit_abnormal 1
        ;;
        esac
done

shift $((OPTIND-1))
if [[ -z "$@" ]]; then
    readonly disks=$(find_disks)
else
    readonly disks=$("$@")
fi

if [[ ! check_redundancy ]]; then
    printf "Rendundancy verification error.\n"
    exit_abnormal
fi

############################
# Set verbosity variables. #
############################
if [[ $verbose -ge 2 ]]; then
    output=1
else
    output=/dev/null
fi

# Safety feature added during development to prevent wiping system disks.
printf "%s\n" "$linespacer" \
"${red}WARNING:${nc} This script will erase all disks it finds on your system."\
   "You should never download and execute this script without first completely"\
   "reading the documentation at:"\
   "https://github.com/JamesSeiters/Scripts/tree/master/ZFS%20Install"\
   "$linespacer"

if $safety_off ; then
    printf "\n${red}Safety off.${nc}"
    printf "\nYou have 10 seconds to press CTRL-C to cancel."
    sleep 10
fi

# For testing only.
exit 99

########################
# Prepare environment. #
########################
printf "%s\n" "$linespacer" "Preparing environment." "$linespacer"
[[ $verbose -ge 1 ]] && printf "Updating package list.\n"
apt update >& $output
[[ $verbose -ge 1 ]] && printf "Installing packages.\n"
apt install --yes debootstrap gdisk zfs-initramfs >& $output

####################
# Partition disks. #
####################
printf "%s\n" "$linespacer" "Partitioning disks." "$linespacer"
#######
# TODO:
# Need to convert this to a loop.
# Make a dry run option.
#######
for disk in drives; do
    [[ $verbose -ge 1 ]] && printf "Partitioning $disk\n"
    wipefs --all --force $disk >& $output
    sgdisk -Z $disk >& $output
    sgdisk -a1 -n1:34:295 -t1:EF02 -c1:"BIOS boot partition" $disk >& $output
    sgdisk -a1 -n3:0:0 -t3:BF00 -c3:"Solaris Root" $disk >& $output
done
[[ $verbose -ge 2 ]] && printf "Re-reading partition table."
partprobe >& $output
sleep 5         # Having problems with part3 not being detected. This is fix?

##########################################
# Create pool and filesystem containers. #
##########################################
printf "%s\n" "$linespacer" "Creating pool and filesystems." "$linespacer"
[[ $verbose -ge 1 ]] && printf "Creating root pool.\n"
zpool create -O atime=on -O relatime=on -O canmount=off -O compression=lz4 -O\
      mountpoint=/ -R /mnt -f $poolname mirror "${drives[@]/%/-part3}" >&\
      $output
[[ $verbose -ge 2 ]] && printf "Creating dataset containers.\n"
zfs create -o canmount=off -o mountpoint=none $poolname/ROOT >& $output
zfs create -o canmount=noauto -o mountpoint=/ $poolname/ROOT/OS >& $output
[[ $verbose -ge 2 ]] && printf "Mounting pool.\n"
zfs mount $poolname/ROOT/OS >& $output

#######################
# Create filesystems. #
#######################
[[ $verbose -ge 1 ]] && printf "Creating filesystems.\n"
[[ $verbose -ge 2 ]] && printf "Creating home.\n"
zfs create -o setuid=off $poolname/home >& $output
[[ $verbose -ge 2 ]] && printf "Creating root home.\n"
zfs create -o mountpoint=/root $poolname/home/root >& $output
[[ $verbose -ge 2 ]] && printf "Creating var.\n"
zfs create -o canmount=off -o setuid=off -o exec=off $poolname/var >& $output
[[ $verbose -ge 2 ]] && printf "Creating var/cache.\n"
zfs create -o com.sun:auto-snapshot=false $poolname/var/cache >& $output
[[ $verbose -ge 2 ]] && printf "Creating var/log.\n"
zfs create $poolname/var/log >& $output
[[ $verbose -ge 2 ]] && printf "Creating var/spool.\n"
zfs create $poolname/var/spool >& $output
[[ $verbose -ge 2 ]] && printf "Creating var/tmp.\n"
zfs create -o com.sun:auto-snapshot=false -o exec=on $poolname/var/tmp >&\
           $output
[[ $verbose -ge 2 ]] && printf "Creating tmp.\n"
zfs create -o com.sun:auto-snapshot=false -o setuid=off $poolname/tmp >& $output
[[ $verbose -ge 2 ]] && printf "Setting access and atrribute policies.\n"
zfs set acltype=posixacl $poolname >& $output
zfs set xattr=sa $poolname >& $output
chmod 1777 /mnt/tmp

###############################
# Install the minimal system. #
###############################
printf "%s\n" "$linespacer" "Installing minimal system." "$linespacer"
chmod 1777 /mnt/var/tmp
debootstrap bionic /mnt >& $output
zfs set devices=off $poolname >& $output

########################################
# Configure minimal system externally. #
########################################
printf "%s\n" "$linespacer" "Configuring minimal system." "$linespacer"
[[ $verbose -ge 2 ]] && printf "Setting hostname."
sed "s/127.0.1.1.*/127.0.1.1 $newhostname/g" < /etc/hosts > /mnt/etc/hosts
echo $newhostname > /mnt/etc/hostname
[[ $verbose -ge 2 ]] && printf "Configuring network.\n"
echo -e "network:\n  version: 2\n  renderer: NetworkManager" >\
        /mnt/etc/netplan/01-NetowrkManager.yaml
[[ $verbose -ge 2 ]] && printf "Configuring apt sources.\n"
sed "s/deb cdrom.*//g" < /etc/apt/sources.list > /mnt/etc/apt/sources.list

###############################
# Configure chroot and enter. #
###############################
printf "%s\n" "$linespacer" "Entering chroot." "$linespacer"
[[ $verbose -ge 2 ]] && printf "Copying setup script.\n"
cp /home/$SUDO_USER/Documents/Instructionschroot /mnt/root/
[[ $verbose -ge 2 ]] && printf "Mounting filesystems.\n"
mount --rbind /dev /mnt/dev
mount --rbind /proc /mnt/proc
mount --rbind /sys /mnt/sys
[[ $verbose -ge 2 ]] && printf "Entering chroot.\n"
sleep 3
chroot /mnt /bin/bash ./root/Instructionschroot $saved_args

###########
# Cleanup #
###########
printf "%s\n" "$linespacer" "Cleaning up." "$linespacer"
# This isn't working yet. It may not matter for what I am doing.
# printf "Unmounting chroot directories."
# umount /mnt/dev
# umount /mnt/sys
# umount /mnt/proc
# printf "Exporting ZFS filesystem."
# zpool export $poolname
printf "%s\n" "$linespacer" "Finished." "$linespacer"
printf "Press ctrl-c to cancel reboot.\n"
sleep 10
reboot
