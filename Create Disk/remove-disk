#!/bin/bash

# Author: James Seiters
# Created: 2019/7/6
# Updated: 2019/7/30
# Copyright: GPLv3
# Description: A shell script to automate the removal of ZFS backed VM disks.

##############
# Variables. #
##############
help_link="https://github.com/JamesSeiters/Scripts/blob/master/Create%20Disk/"
#max_disks=2478
red='\e[38;5;196m'
yellow='\e[38;5;11m'
nc='\e[0m'
error_color=$red
error_lead="ERROR:"
error_text="Something went wrong and a developer was too lazy to write good help text."
error_help="Use $(basename "$0") -h for more information."
error_status=1
readonly -A parameters=([pool_name]=-p [vm_name]=-n [vm_directory]=-d [disks_to_remove]=-c [removal_code]=-x)

#######
# TODO: Need to remove the POOL/VMNAME/DISKNAME, POOL/VMNAME by using zfs destroy.
#       Also need to remove the virtual disk files from VitrualBox VMs directory.
#       Remove the entry from the 99-local-zvol.rules file.
#       Optionally update the VM configuration?
#######
error_exit() {
  # Formats error messages in a consistent style.
  while [[ "$#" -gt 0 ]] ; do
    case "$1" in
      -e|--error)
        local error_lead="ERROR: $2"
        local error_color=$red
        shift
        ;;
      -w|--warning)
        local error_lead="WARNING: $2"
        local error_color=$yellow
        local error_status=0
        shift
        ;;
      -t|--text)
        local error_text="$2"
        shift
        ;;
      -h|--help)
        local error_help="$2"
        shift
        ;;
      -s|--status)
        local error_status="$2"
        shift
        ;;
    esac
    shift
  done

  printf "${error_color}%s${nc}\n\n" "$error_lead"
  printf "%s\n\n" "$error_text" "$error_help" | fold -s -w $COLUMNS

  local reg_ex='^([1-9][0-9]{0,1}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
  [[ $error_status =~ $reg_ex ]] && exit $error_status || true
}

usage() {
  # Displays the usage string.
  printf "%s\n" "Usage:"
  printf "%s\n"\
        "$(basename $0) -p [POOL] -n [VIRTUAL MACHINE NAME] -d [VIRTUAL MACHINE DIRECTORY] -c [NUMBER OF DRIVES] -x [REMOVAL CODE]"\
        "" "Options:"
  printf "%s\t%s\n"\
        "-p" "Name of the ZFS dataset to remove disks from."\
        "-n" "Name of the VM to remove disks from."\
        "-d" "Directory where the virtual machines disk files are stored."\
        "-c" "The number of the disks to remove. This can be a single disk, a range, or a comma sepreated list. i.e. a range: 2-4 or list of disks: 1,3,6"\
        "-x" "Code that optionally removes the dataset and VMDK files. Accepted codes are d: dataset, v: VMDK file, a: remove the dataset and VMDK files."
}

get_exisiting_disk_count() {
  # Returns the number of disk files in the provided dataset.
  local vm_name=$(echo "$vm_name" | tr " " +)
  if ! [[ -d /dev/zvol/$pool_name/$vm_name ]] ; then
    echo 0
    return
  fi

  local disk_count=0
  local files=(/dev/zvol/$pool_name/$vm_name/*)

  for result in ${files[@]} ; do
    if [[ $(file -L "$result") == *"block special"* ]] ; then
      ((disk_count++))
    fi
  done
  
  echo $disk_count
}

remove_vbox_zvol() {
  #######
  # Removes the ZVOLs for VirtualBox VMs created by the create disk script and cleans the entry in the udev rules file.
  # This script deos not affect the VMDK files and can be run before or after a VM is removed from VirtualBox.
  #######
  local disk_name="${vm_name}-disk$1"
  local ZVOL_name="$pool_name/$vm_name/$disk_name"
  
  #######
  # TODO: Need to remove the ZVOL from /dev/zvol and the entry in /etc/udev/rules.d/99-local-zvol.rules.
  #######
  output=$(zfs destroy $ZVOL_name 2>&1)
  if [[ $? -ne 0 ]] ; then
    error_exit -w "ZVOL $ZVOL_name removal failed." -t "$output" -h ""
  else
    # Remove line from rule.
    output=$(sed -i '/$disk_name/d' /etc/udev/rules.d/99-local-zvol.rules 2>&1)
    [[ $? -ne 0 ]] && -w "Udev rules file not modified." -t "$output" -h ""
  fi
}

remove_dataset () {
  #######
  # Removes the dataset for the virtual machine.
  #######
  output=$(zfs destroy $pool_name/$vm_name 2>&1)
  [[ $? -ne 0 ]] && -w "Dataset $pool_name/$vm_name not removed." -t "$output"
}

remove_vmdk_file() {
  #######
  # Removes the VMDK files from the virtual machines directory.
  #######
  local disk_name="${vm_name}-disk$1"
  output=$(rm $vm_directory/$vm_name/$disk_name 2>&1)
  [[ $? -ne 0 ]] && -w "VMDK file not removed." -t "$output"
}

####################
# Standard checks. #
####################
if [ "$(id -u)" != "0" ]; then
  error_exit -e "Insufficient privilages." -t "This script must be run with root privileges." -s 125
fi

#########################
# Parameter processing. #
#########################
[[ $# -eq 0 ]] && error_exit -e "Command must be run with parameters." -t "$(usage)" -h "For more information see: $help_link" -s 124

while getopts ":hp:n:d:c:x:" options; do

  case "${options}" in
    h)
      usage
      exit 0
      ;;
    p)
      if ! [[ $(zpool list "$OPTARG" 2>/dev/null) ]] ; then
        error_exit -e "Pool $OPTARG does not exist." -t "Make sure you have entered the name correctly." -h "For more information see: $help_link" -s 124
      fi
      
      pool_name=${OPTARG%/}
      ;;
    n)
      vm_name=$OPTARG
      ;;
    d)
      if ! [[ -d $OPTARG ]] ; then
        error_exit -e "VM Directory $OPTARG does not exist." -t "Make sure you have entered the name correctly." -h "For more information see: $help_link" -s 124
      fi
      
      vm_directory=${OPTARG%/}
      ;;
    c)
       valid_count='^([1-9]|[1-9][0-9]{1,2}|1[0-9]{1,3}|2[0-4][0-7][0-8])$'
 
       if ! [[ $OPTARG =~ $valid_count && ${OPTARG//[!0-9]/} -le $max_disks ]] ; then
         error_exit -e "Invalid number of disks: $OPTARG" -t "Number of disks must be a positive, whole number greater than 0 and less than $(($max_disks + 1))."\
                    -h "For more information see: $help_link" -s 124
       fi
       number_of_disks=$OPTARG
       ;;
    x)
      
      if [[ $OPTARG -eq "d" ]] ; then
        dataset_remove=1
      elif [[ $OPTARG -eq "v" ]] ; then
        vmdk_remove=1
      elif [[ $OPTARG -eq "a" ]] ; then
        all_remove=1
      else
        error_exit -e "Invalid removal code." -t "Enter a valid code for removing files and datasets." -h "For more information see: $help_link"
      ;;
    :)
      error_exit -e "Parameter required." -t "Option -$OPTARG requires an argument." -s 124
      ;;
    *)
      error_exit -e "Unknown option: -${OPTARG}." -t "Please enter a valid option." -s 124
      ;;
  esac
done

for variable in ${!parameters[@]} ; do
  [[ ${!variable} ]] || error_exit -e "Parameter cannot be empty." -t "${parameters[$variable]} is a mandatory parameter and must have a valid value." -s 124
done

if ! [[ -d $pool_name/$vm_name ]] ; then
  error_exit -e "Virtual machine directory $pool_name/$vm_name does not exist." -t "Make sure you have entered the name correctly." -s 123
fi


########
# Main #
########
